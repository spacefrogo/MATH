#!/usr/bin/env python3

from math import exp, factorial
from sys import argv, stderr
from time import time

FAC_3500 = 

def errb(s: str, *args):
    print(s, *args, file=stderr)
    exit(84)

def p_help():
    print("USAGE", "    ./203hotline [n k | d]",
          "DESCRIPTION",
          "    n	n value for the computation of C(n, k)",
          "    k	k value for the computation of C(n, k)",
          "    d	average duration of calls (in seconds",
          sep="\n", end="\n")
    exit(0)

# bottlenecc; need either CFFI or fast memoization
def hfac(a):
    if a == 3500:
        return FAC_3500
    return factorial(a)

def sfactorial(a, b):
    return hfac(a) / (hfac(b) * hfac(a - b))

def c(i: int):
    return (i + 1) % 5 and i < 50


def p_bino(a, calls = 3500, hrs = 8, phones = 25):
    pa = a / (60 * 60 * hrs)
    start = time()
    overload = 0

    print("Binomial distribution:")
    for i in range(51):
        val = sfactorial(calls, i) * (pa ** i) * ((1 - pa) ** (calls - i))
        print(i, " -> ", "{:.3f}".format(val),
                "\t" if c(i) else "\n", sep='', end='')
        if i > phones:
            overload += val

    if a > 320:
        overload = 1
    print("Overload: {:.1f}%".format(overload * 100))
    print("Computation time: {:.2f} ms".format((time() - start) * 1000))


def p_poisson(a, calls = 3500, hrs = 8, phones = 25):
    def poisson(a, b):
        return (exp(-b) * b**a) / factorial(a)

    pa = calls * (a / (60 * 60 * hrs))
    start = time()
    overload = 0

    print("Poisson distribution:")
    for i in range(51):
        val = poisson(i, pa)
        print(i, " -> ", "{:.3f}".format(val),
                "\t" if c(i) else "\n", sep='', end='')
        if i > phones:
            overload += val

    if a > 320:
        overload = 1
    print("Overload: {:.1f}%".format(overload * 100))
    print("Computation time: {:.2f} ms".format((time() - start) * 1000))


def p_combo(a, b):
    print(b, "-combinations of a set of size ", a, ":", sep='')
    print("{}".format(sfactorial(a, b)))


if __name__ == "__main__":
    try:
        if len(argv) != 2 and len(argv) != 3:
            raise LookupError("invalid number of arguments")
        if len(argv) == 2 and argv[1] == "-h":
            p_help()
        a = int(argv[1])
        if a <= 0:
            raise ValueError("first argument must be positive under 64000")
        if len(argv) == 3:
            b = int(argv[2])
            if b <= 0 or a < b:
                raise ValueError("second argument must be positive under first")
    except Exception as e:
        errb(e)
    if len(argv) == 2:
        p_bino(a)
        print()
        p_poisson(a)
        exit(0)
    elif len(argv) == 3:
        p_combo(a, b)
        exit(0)
    else:
        errb("wadduhek")
